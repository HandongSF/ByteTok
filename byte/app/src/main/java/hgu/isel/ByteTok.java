/*
 * This source file was generated by the Gradle 'init' task
 */
package hgu.isel;

import hgu.isel.analyzer.ByteAnalyzer;
import hgu.isel.reader.ByteReader;
import hgu.isel.tokenizer.ByteStructure;
import hgu.isel.tokenizer.ByteTokenizer;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class ByteTok {

    public static void main(String[] args) {
        ByteTok parser = new ByteTok();
        parser.run(args[0], args[1]);
    }

    public void run(String path, String option) {

        if(option.equals("v")) {
            ByteReader byteReader = new ByteReader(path);
            List<String> filePaths = byteReader.readClassFilePaths();
            List<ByteStructure> byteStructures = new ArrayList<>();
            byte[] bytes;

            for(String s : filePaths) {
                bytes = byteReader.readClassFile(s);

                ByteAnalyzer byteAnalyzer = new ByteAnalyzer(bytes);
                try {
                    ByteStructure byteStructure = byteAnalyzer.analyze();
                    byteStructures.add(byteStructure);

                } catch (Exception e) {
                    try {
                        Path filePath = Paths.get(s);
                        Files.delete(filePath);
                        System.out.println("Deleted file: " + s);
                    } catch (IOException deleteException) {
                        System.err.println("Failed to delete file: " + s);

                    }
                }

            }

            ByteTokenizer byteTokenizer = new ByteTokenizer(byteStructures);
            byteTokenizer.createVocabulary();

        } else if(option.equals("t")) {
            ByteReader byteReader = new ByteReader(path);

            byte[] bytes = byteReader.readClassFile();

            ByteAnalyzer byteAnalyzer = new ByteAnalyzer(bytes);
            ByteStructure byteStructure = null;
            try {
                byteStructure = byteAnalyzer.analyze();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }

            ByteTokenizer byteTokenizer = new ByteTokenizer();

            List<String> tokens = byteTokenizer.tokenize(byteStructure);
            for(String s : tokens) {
                System.out.println(s);
            }

        } else if(option.equals("s")) { // delete kotlin / scala files
            ByteReader byteReader = new ByteReader(path);
            List<String> filePaths = byteReader.readClassFilePaths();

            byte[] bytes;

            for(String s : filePaths) {
                bytes = byteReader.readClassFile(s);

                ByteAnalyzer byteAnalyzer = new ByteAnalyzer(bytes);
                try {
                    byteAnalyzer.analyze();
                    System.out.println("Success!! : " + s);
                } catch (Exception e) {
                    try {
                        Path filePath = Paths.get(s);
                        Files.delete(filePath);
                        System.out.println("Deleted file: " + s);
                    } catch (IOException deleteException) {
                        System.err.println("Failed to delete file: " + s);

                    }
                }
            }
        }
    }
}
